*  你是否应该读 Clean Code 这本书 (下)
** 前情提要
在前两篇文章中，我们已经明确了 Clean Code 的目的是减少团队成员的沟通成
本，今天我将根据自身的经验讲述为什么怎样才能学习编写 Clean Code，这完全
是一家之谈，有不对之处，请不吝赐教。
** 悟性是不可靠的
** 规范！规范！规范

** 如何提高代码质量
*** 老人的回答
大多数情况下，我拿着这个问题去问人，都会得到同样的回答：多读，多写。
**** 熟读唐诗三百首,不会作诗也会吟
多读，多读别人写的代码，好的代码


咋看之下，这个问题看起来很没有必要。如何能获得经验，那不就是勤加练习吗？
多写代码，多看别人写的好的代码。
*** 说了等于没说
 从理论到实践，从常识到可操作行为，
做到了，所以有共鸣；没有共鸣，还没有做到或者不知道可以这么做；

*** 不具可操作性

*** 不分层

** 最后结论

这本书适合作为检查清单
提前看，作用不大。因为没有遇到痛点，一般人都记不住规范。

用篮球来比喻
完全不会打篮球的人，看到高超的技巧，完全没有感受
乔丹
科比
菜鸟
神级选手

只有到了可理解区间，才能明白对方的强大

以前看不下去，感觉没有营养的书籍，到了某个层次，就会变成有营养了



** 缺失的是习惯的培养
问题变成如何：如何编写可读性高的代码
应该从软件构建之道那个书上讲的，一个多次迭代的项目，才能看得出来，优秀编程实践的作用
只写一遍就结束，也没有人用的程序，得不到反馈。
而且事实上，新人没有足够的知识去判断程序写得好不好
但是，如果让他自己通过多次迭代去增进对代码的认识的话，可能是一个不错的方式

如果你自己一个人开发，那么就随便吧，怎么开心怎么来，大括号爱放哪儿放哪
儿，蛇地式还是驼峰式也随便选。

** 先说结论



经过很长时间的观察和思考，我得出的提高代码质量的方法就是：
- 首先搞明白团队里的高质量代码是什么样子的
- 临摹
- 融合









